== Initial Steps

//TODO
* Get a MS Live ID
* Log into Azure Control panel
* etc

== Planning The Cluster

//TODO
* Fault Domains
* Datacenters

== Provisioning Instances

--
*Prerequisites:* Windows machine with Azure PowerShell cmdlets and Azure account credentials. Refer to http://blogs.technet.com/b/askpfeplat/archive/2013/04/14/building-a-vm-in-windows-azure-using-powershell-in-a-few-quick-steps.aspx[this blog] to configure PowerShell.
--

Create Affinity Group:

  New-AzureAffinityGroup -Name "PerfTestGroup" -Label "DataStax" -Location "East US"

Create VNET in order to use static IPs (the only command which can't be done through PowerShell, use xplatform tools or portal):

  azure network vnet create --affinity-group "PerfTestGroup" --address-space 10.1.0.0 --cidr 16 perftest-vnet

Configure provisioning script link:../scripts/provision.ps1[] and set followings:

** Affinity Group
** VNet
** Number of Cassandra Cloud Services
** Number of Cassandra nodes per Cloud Service (max 50)
** Total number of load generating nodes (max 50)
** Path and fingerprint of SSH certificate
** Default linux username and password

Script above can provision up to 254 instances (CS x nodes per CS), where each instance has following properties (x=instance number between 1..254):

|===
|Hostname|datastax-perftest-x
|Private Static IP|10.1.1.x
|Public SSH port (on VIP)|1000x
|OS	Linux|CentOS 6.5
|VM Size|A7
|Drives|16 x 64GB (1024 GB)
|===

--
Note: Single storage account can only be shared between 2 nodes. Each storage account has limit of 20K IOPS. Each node requires 8000 IOPS (16 disks x 500 IOPS).
--

== Configuring Nodes

Once the nodes have been started up, they need to be configured to be ready for OpsCenter to deploy DSE. The first step in this process will be to set up the default user (in this case "datastax") so that it can invoke _sudo_ without a password, which will make other configuration steps significantly easier. This script provides an example of one way to accomplish that.

include::../scripts/setup_sudoers.sh[]

== Deprovisioning Instances

Delete all virtual machines and attached disks in the given Cloud Service, but not the cloud service itself (replace service name):

  Remove-AzureDeployment -ServiceName "datastax-perftest" -Slot Production -DeleteVHD
  Remove-AzureDeployment -ServiceName "datastax-stresser" -Slot Production -DeleteVHD

Finally, clean up disks that are no longer attached to virtual machines (be careful of this one â€“ ensure you know what you are deleting before executing):

  Get-AzureDisk | where { $_.AttachedTo -eq $null } | Remove-AzureDisk -DeleteVHD
